Terminals which are not used

   DOT
   ARR


State 91 conflicts: 1 shift/reduce


Grammar

    0 $accept: prog $end

    1 prog: func_list

    2 func_list: func_list fun
    3          | fun

    4 fun: type fun_head fun_body

    5 fun_head: ID PO PF
    6         | ID PO params PF

    7 params: type ID vir params
    8       | type ID

    9 vlist: vlist vir ID
   10      | ID

   11 vir: VIR

   12 fun_body: AO block AF

   13 block: decl_list inst_list

   14 decl_list: decl_list decl
   15          | /* empty */

   16 decl: var_decl PV

   17 var_decl: type vlist

   18 type: typename

   19 typename: TINT
   20         | VOID

   21 inst_list: inst inst_list
   22          | inst

   23 pv: PV

   24 inst: exp pv
   25     | ao block af
   26     | aff pv
   27     | ret pv
   28     | cond
   29     | loop
   30     | pv

   31 ao: AO

   32 af: AF

   33 aff: ID EQ exp

   34 ret: RETURN exp
   35    | RETURN PO PF

   36 cond: if bool_cond inst elsop

   37 elsop: else inst
   38      | /* empty */

   39 bool_cond: PO exp PF

   40 if: IF

   41 else: ELSE

   42 loop: while while_cond inst

   43 while_cond: PO exp PF

   44 while: WHILE

   45 exp: MOINS exp
   46    | exp PLUS exp
   47    | exp MOINS exp
   48    | exp STAR exp
   49    | exp DIV exp
   50    | PO exp PF
   51    | ID
   52    | app
   53    | NUM
   54    | NOT exp
   55    | exp INF exp
   56    | exp SUP exp
   57    | exp EQUAL exp
   58    | exp DIFF exp
   59    | exp AND exp
   60    | exp OR exp

   61 app: ID PO args PF

   62 args: arglist
   63     | /* empty */

   64 arglist: exp VIR arglist
   65        | exp


Terminals, with rules where they appear

$end (0) 0
error (256)
NUM (258) 53
TINT (259) 19
ID (260) 5 6 7 8 9 10 33 51 61
AO (261) 12 31
AF (262) 12 32
PO (263) 5 6 35 39 43 50 61
PF (264) 5 6 35 39 43 50 61
PV (265) 16 23
VIR (266) 11 64
RETURN (267) 34 35
VOID (268) 20
EQ (269) 33
IF (270) 40
ELSE (271) 41
WHILE (272) 44
AND (273) 59
OR (274) 60
NOT (275) 54
DIFF (276) 58
EQUAL (277) 57
SUP (278) 56
INF (279) 55
PLUS (280) 46
MOINS (281) 45 47
STAR (282) 48
DIV (283) 49
DOT (284)
ARR (285)
UNA (286)


Nonterminals, with rules where they appear

$accept (32)
    on left: 0
prog (33)
    on left: 1, on right: 0
func_list (34)
    on left: 2 3, on right: 1 2
fun (35)
    on left: 4, on right: 2 3
fun_head (36)
    on left: 5 6, on right: 4
params (37)
    on left: 7 8, on right: 6 7
vlist (38)
    on left: 9 10, on right: 9 17
vir (39)
    on left: 11, on right: 7 9
fun_body (40)
    on left: 12, on right: 4
block (41)
    on left: 13, on right: 12 25
decl_list (42)
    on left: 14 15, on right: 13 14
decl (43)
    on left: 16, on right: 14
var_decl (44)
    on left: 17, on right: 16
type (45)
    on left: 18, on right: 4 7 8 17
typename (46)
    on left: 19 20, on right: 18
inst_list (47)
    on left: 21 22, on right: 13 21
pv (48)
    on left: 23, on right: 24 26 27 30
inst (49)
    on left: 24 25 26 27 28 29 30, on right: 21 22 36 37 42
ao (50)
    on left: 31, on right: 25
af (51)
    on left: 32, on right: 25
aff (52)
    on left: 33, on right: 26
ret (53)
    on left: 34 35, on right: 27
cond (54)
    on left: 36, on right: 28
elsop (55)
    on left: 37 38, on right: 36
bool_cond (56)
    on left: 39, on right: 36
if (57)
    on left: 40, on right: 36
else (58)
    on left: 41, on right: 37
loop (59)
    on left: 42, on right: 29
while_cond (60)
    on left: 43, on right: 42
while (61)
    on left: 44, on right: 42
exp (62)
    on left: 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60,
    on right: 24 33 34 39 43 45 46 47 48 49 50 54 55 56 57 58 59 60
    64 65
app (63)
    on left: 61, on right: 52
args (64)
    on left: 62 63, on right: 61
arglist (65)
    on left: 64 65, on right: 62 64


state 0

    0 $accept: . prog $end

    TINT  shift, and go to state 1
    VOID  shift, and go to state 2

    prog       go to state 3
    func_list  go to state 4
    fun        go to state 5
    type       go to state 6
    typename   go to state 7


state 1

   19 typename: TINT .

    $default  reduce using rule 19 (typename)


state 2

   20 typename: VOID .

    $default  reduce using rule 20 (typename)


state 3

    0 $accept: prog . $end

    $end  shift, and go to state 8


state 4

    1 prog: func_list .
    2 func_list: func_list . fun

    TINT  shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 1 (prog)

    fun       go to state 9
    type      go to state 6
    typename  go to state 7


state 5

    3 func_list: fun .

    $default  reduce using rule 3 (func_list)


state 6

    4 fun: type . fun_head fun_body

    ID  shift, and go to state 10

    fun_head  go to state 11


state 7

   18 type: typename .

    $default  reduce using rule 18 (type)


state 8

    0 $accept: prog $end .

    $default  accept


state 9

    2 func_list: func_list fun .

    $default  reduce using rule 2 (func_list)


state 10

    5 fun_head: ID . PO PF
    6         | ID . PO params PF

    PO  shift, and go to state 12


state 11

    4 fun: type fun_head . fun_body

    AO  shift, and go to state 13

    fun_body  go to state 14


state 12

    5 fun_head: ID PO . PF
    6         | ID PO . params PF

    TINT  shift, and go to state 1
    PF    shift, and go to state 15
    VOID  shift, and go to state 2

    params    go to state 16
    type      go to state 17
    typename  go to state 7


state 13

   12 fun_body: AO . block AF

    $default  reduce using rule 15 (decl_list)

    block      go to state 18
    decl_list  go to state 19


state 14

    4 fun: type fun_head fun_body .

    $default  reduce using rule 4 (fun)


state 15

    5 fun_head: ID PO PF .

    $default  reduce using rule 5 (fun_head)


state 16

    6 fun_head: ID PO params . PF

    PF  shift, and go to state 20


state 17

    7 params: type . ID vir params
    8       | type . ID

    ID  shift, and go to state 21


state 18

   12 fun_body: AO block . AF

    AF  shift, and go to state 22


state 19

   13 block: decl_list . inst_list
   14 decl_list: decl_list . decl

    NUM     shift, and go to state 23
    TINT    shift, and go to state 1
    ID      shift, and go to state 24
    AO      shift, and go to state 25
    PO      shift, and go to state 26
    PV      shift, and go to state 27
    RETURN  shift, and go to state 28
    VOID    shift, and go to state 2
    IF      shift, and go to state 29
    WHILE   shift, and go to state 30
    NOT     shift, and go to state 31
    MOINS   shift, and go to state 32

    decl       go to state 33
    var_decl   go to state 34
    type       go to state 35
    typename   go to state 7
    inst_list  go to state 36
    pv         go to state 37
    inst       go to state 38
    ao         go to state 39
    aff        go to state 40
    ret        go to state 41
    cond       go to state 42
    if         go to state 43
    loop       go to state 44
    while      go to state 45
    exp        go to state 46
    app        go to state 47


state 20

    6 fun_head: ID PO params PF .

    $default  reduce using rule 6 (fun_head)


state 21

    7 params: type ID . vir params
    8       | type ID .

    VIR  shift, and go to state 48

    $default  reduce using rule 8 (params)

    vir  go to state 49


state 22

   12 fun_body: AO block AF .

    $default  reduce using rule 12 (fun_body)


state 23

   53 exp: NUM .

    $default  reduce using rule 53 (exp)


state 24

   33 aff: ID . EQ exp
   51 exp: ID .
   61 app: ID . PO args PF

    PO  shift, and go to state 50
    EQ  shift, and go to state 51

    $default  reduce using rule 51 (exp)


state 25

   31 ao: AO .

    $default  reduce using rule 31 (ao)


state 26

   50 exp: PO . exp PF

    NUM    shift, and go to state 23
    ID     shift, and go to state 52
    PO     shift, and go to state 26
    NOT    shift, and go to state 31
    MOINS  shift, and go to state 32

    exp  go to state 53
    app  go to state 47


state 27

   23 pv: PV .

    $default  reduce using rule 23 (pv)


state 28

   34 ret: RETURN . exp
   35    | RETURN . PO PF

    NUM    shift, and go to state 23
    ID     shift, and go to state 52
    PO     shift, and go to state 54
    NOT    shift, and go to state 31
    MOINS  shift, and go to state 32

    exp  go to state 55
    app  go to state 47


state 29

   40 if: IF .

    $default  reduce using rule 40 (if)


state 30

   44 while: WHILE .

    $default  reduce using rule 44 (while)


state 31

   54 exp: NOT . exp

    NUM    shift, and go to state 23
    ID     shift, and go to state 52
    PO     shift, and go to state 26
    NOT    shift, and go to state 31
    MOINS  shift, and go to state 32

    exp  go to state 56
    app  go to state 47


state 32

   45 exp: MOINS . exp

    NUM    shift, and go to state 23
    ID     shift, and go to state 52
    PO     shift, and go to state 26
    NOT    shift, and go to state 31
    MOINS  shift, and go to state 32

    exp  go to state 57
    app  go to state 47


state 33

   14 decl_list: decl_list decl .

    $default  reduce using rule 14 (decl_list)


state 34

   16 decl: var_decl . PV

    PV  shift, and go to state 58


state 35

   17 var_decl: type . vlist

    ID  shift, and go to state 59

    vlist  go to state 60


state 36

   13 block: decl_list inst_list .

    $default  reduce using rule 13 (block)


state 37

   30 inst: pv .

    $default  reduce using rule 30 (inst)


state 38

   21 inst_list: inst . inst_list
   22          | inst .

    NUM     shift, and go to state 23
    ID      shift, and go to state 24
    AO      shift, and go to state 25
    PO      shift, and go to state 26
    PV      shift, and go to state 27
    RETURN  shift, and go to state 28
    IF      shift, and go to state 29
    WHILE   shift, and go to state 30
    NOT     shift, and go to state 31
    MOINS   shift, and go to state 32

    $default  reduce using rule 22 (inst_list)

    inst_list  go to state 61
    pv         go to state 37
    inst       go to state 38
    ao         go to state 39
    aff        go to state 40
    ret        go to state 41
    cond       go to state 42
    if         go to state 43
    loop       go to state 44
    while      go to state 45
    exp        go to state 46
    app        go to state 47


state 39

   25 inst: ao . block af

    $default  reduce using rule 15 (decl_list)

    block      go to state 62
    decl_list  go to state 19


state 40

   26 inst: aff . pv

    PV  shift, and go to state 27

    pv  go to state 63


state 41

   27 inst: ret . pv

    PV  shift, and go to state 27

    pv  go to state 64


state 42

   28 inst: cond .

    $default  reduce using rule 28 (inst)


state 43

   36 cond: if . bool_cond inst elsop

    PO  shift, and go to state 65

    bool_cond  go to state 66


state 44

   29 inst: loop .

    $default  reduce using rule 29 (inst)


state 45

   42 loop: while . while_cond inst

    PO  shift, and go to state 67

    while_cond  go to state 68


state 46

   24 inst: exp . pv
   46 exp: exp . PLUS exp
   47    | exp . MOINS exp
   48    | exp . STAR exp
   49    | exp . DIV exp
   55    | exp . INF exp
   56    | exp . SUP exp
   57    | exp . EQUAL exp
   58    | exp . DIFF exp
   59    | exp . AND exp
   60    | exp . OR exp

    PV     shift, and go to state 27
    AND    shift, and go to state 69
    OR     shift, and go to state 70
    DIFF   shift, and go to state 71
    EQUAL  shift, and go to state 72
    SUP    shift, and go to state 73
    INF    shift, and go to state 74
    PLUS   shift, and go to state 75
    MOINS  shift, and go to state 76
    STAR   shift, and go to state 77
    DIV    shift, and go to state 78

    pv  go to state 79


state 47

   52 exp: app .

    $default  reduce using rule 52 (exp)


state 48

   11 vir: VIR .

    $default  reduce using rule 11 (vir)


state 49

    7 params: type ID vir . params

    TINT  shift, and go to state 1
    VOID  shift, and go to state 2

    params    go to state 80
    type      go to state 17
    typename  go to state 7


state 50

   61 app: ID PO . args PF

    NUM    shift, and go to state 23
    ID     shift, and go to state 52
    PO     shift, and go to state 26
    NOT    shift, and go to state 31
    MOINS  shift, and go to state 32

    $default  reduce using rule 63 (args)

    exp      go to state 81
    app      go to state 47
    args     go to state 82
    arglist  go to state 83


state 51

   33 aff: ID EQ . exp

    NUM    shift, and go to state 23
    ID     shift, and go to state 52
    PO     shift, and go to state 26
    NOT    shift, and go to state 31
    MOINS  shift, and go to state 32

    exp  go to state 84
    app  go to state 47


state 52

   51 exp: ID .
   61 app: ID . PO args PF

    PO  shift, and go to state 50

    $default  reduce using rule 51 (exp)


state 53

   46 exp: exp . PLUS exp
   47    | exp . MOINS exp
   48    | exp . STAR exp
   49    | exp . DIV exp
   50    | PO exp . PF
   55    | exp . INF exp
   56    | exp . SUP exp
   57    | exp . EQUAL exp
   58    | exp . DIFF exp
   59    | exp . AND exp
   60    | exp . OR exp

    PF     shift, and go to state 85
    AND    shift, and go to state 69
    OR     shift, and go to state 70
    DIFF   shift, and go to state 71
    EQUAL  shift, and go to state 72
    SUP    shift, and go to state 73
    INF    shift, and go to state 74
    PLUS   shift, and go to state 75
    MOINS  shift, and go to state 76
    STAR   shift, and go to state 77
    DIV    shift, and go to state 78


state 54

   35 ret: RETURN PO . PF
   50 exp: PO . exp PF

    NUM    shift, and go to state 23
    ID     shift, and go to state 52
    PO     shift, and go to state 26
    PF     shift, and go to state 86
    NOT    shift, and go to state 31
    MOINS  shift, and go to state 32

    exp  go to state 53
    app  go to state 47


state 55

   34 ret: RETURN exp .
   46 exp: exp . PLUS exp
   47    | exp . MOINS exp
   48    | exp . STAR exp
   49    | exp . DIV exp
   55    | exp . INF exp
   56    | exp . SUP exp
   57    | exp . EQUAL exp
   58    | exp . DIFF exp
   59    | exp . AND exp
   60    | exp . OR exp

    AND    shift, and go to state 69
    OR     shift, and go to state 70
    DIFF   shift, and go to state 71
    EQUAL  shift, and go to state 72
    SUP    shift, and go to state 73
    INF    shift, and go to state 74
    PLUS   shift, and go to state 75
    MOINS  shift, and go to state 76
    STAR   shift, and go to state 77
    DIV    shift, and go to state 78

    $default  reduce using rule 34 (ret)


state 56

   46 exp: exp . PLUS exp
   47    | exp . MOINS exp
   48    | exp . STAR exp
   49    | exp . DIV exp
   54    | NOT exp .
   55    | exp . INF exp
   56    | exp . SUP exp
   57    | exp . EQUAL exp
   58    | exp . DIFF exp
   59    | exp . AND exp
   60    | exp . OR exp

    $default  reduce using rule 54 (exp)


state 57

   45 exp: MOINS exp .
   46    | exp . PLUS exp
   47    | exp . MOINS exp
   48    | exp . STAR exp
   49    | exp . DIV exp
   55    | exp . INF exp
   56    | exp . SUP exp
   57    | exp . EQUAL exp
   58    | exp . DIFF exp
   59    | exp . AND exp
   60    | exp . OR exp

    $default  reduce using rule 45 (exp)


state 58

   16 decl: var_decl PV .

    $default  reduce using rule 16 (decl)


state 59

   10 vlist: ID .

    $default  reduce using rule 10 (vlist)


state 60

    9 vlist: vlist . vir ID
   17 var_decl: type vlist .

    VIR  shift, and go to state 48

    $default  reduce using rule 17 (var_decl)

    vir  go to state 87


state 61

   21 inst_list: inst inst_list .

    $default  reduce using rule 21 (inst_list)


state 62

   25 inst: ao block . af

    AF  shift, and go to state 88

    af  go to state 89


state 63

   26 inst: aff pv .

    $default  reduce using rule 26 (inst)


state 64

   27 inst: ret pv .

    $default  reduce using rule 27 (inst)


state 65

   39 bool_cond: PO . exp PF

    NUM    shift, and go to state 23
    ID     shift, and go to state 52
    PO     shift, and go to state 26
    NOT    shift, and go to state 31
    MOINS  shift, and go to state 32

    exp  go to state 90
    app  go to state 47


state 66

   36 cond: if bool_cond . inst elsop

    NUM     shift, and go to state 23
    ID      shift, and go to state 24
    AO      shift, and go to state 25
    PO      shift, and go to state 26
    PV      shift, and go to state 27
    RETURN  shift, and go to state 28
    IF      shift, and go to state 29
    WHILE   shift, and go to state 30
    NOT     shift, and go to state 31
    MOINS   shift, and go to state 32

    pv     go to state 37
    inst   go to state 91
    ao     go to state 39
    aff    go to state 40
    ret    go to state 41
    cond   go to state 42
    if     go to state 43
    loop   go to state 44
    while  go to state 45
    exp    go to state 46
    app    go to state 47


state 67

   43 while_cond: PO . exp PF

    NUM    shift, and go to state 23
    ID     shift, and go to state 52
    PO     shift, and go to state 26
    NOT    shift, and go to state 31
    MOINS  shift, and go to state 32

    exp  go to state 92
    app  go to state 47


state 68

   42 loop: while while_cond . inst

    NUM     shift, and go to state 23
    ID      shift, and go to state 24
    AO      shift, and go to state 25
    PO      shift, and go to state 26
    PV      shift, and go to state 27
    RETURN  shift, and go to state 28
    IF      shift, and go to state 29
    WHILE   shift, and go to state 30
    NOT     shift, and go to state 31
    MOINS   shift, and go to state 32

    pv     go to state 37
    inst   go to state 93
    ao     go to state 39
    aff    go to state 40
    ret    go to state 41
    cond   go to state 42
    if     go to state 43
    loop   go to state 44
    while  go to state 45
    exp    go to state 46
    app    go to state 47


state 69

   59 exp: exp AND . exp

    NUM    shift, and go to state 23
    ID     shift, and go to state 52
    PO     shift, and go to state 26
    NOT    shift, and go to state 31
    MOINS  shift, and go to state 32

    exp  go to state 94
    app  go to state 47


state 70

   60 exp: exp OR . exp

    NUM    shift, and go to state 23
    ID     shift, and go to state 52
    PO     shift, and go to state 26
    NOT    shift, and go to state 31
    MOINS  shift, and go to state 32

    exp  go to state 95
    app  go to state 47


state 71

   58 exp: exp DIFF . exp

    NUM    shift, and go to state 23
    ID     shift, and go to state 52
    PO     shift, and go to state 26
    NOT    shift, and go to state 31
    MOINS  shift, and go to state 32

    exp  go to state 96
    app  go to state 47


state 72

   57 exp: exp EQUAL . exp

    NUM    shift, and go to state 23
    ID     shift, and go to state 52
    PO     shift, and go to state 26
    NOT    shift, and go to state 31
    MOINS  shift, and go to state 32

    exp  go to state 97
    app  go to state 47


state 73

   56 exp: exp SUP . exp

    NUM    shift, and go to state 23
    ID     shift, and go to state 52
    PO     shift, and go to state 26
    NOT    shift, and go to state 31
    MOINS  shift, and go to state 32

    exp  go to state 98
    app  go to state 47


state 74

   55 exp: exp INF . exp

    NUM    shift, and go to state 23
    ID     shift, and go to state 52
    PO     shift, and go to state 26
    NOT    shift, and go to state 31
    MOINS  shift, and go to state 32

    exp  go to state 99
    app  go to state 47


state 75

   46 exp: exp PLUS . exp

    NUM    shift, and go to state 23
    ID     shift, and go to state 52
    PO     shift, and go to state 26
    NOT    shift, and go to state 31
    MOINS  shift, and go to state 32

    exp  go to state 100
    app  go to state 47


state 76

   47 exp: exp MOINS . exp

    NUM    shift, and go to state 23
    ID     shift, and go to state 52
    PO     shift, and go to state 26
    NOT    shift, and go to state 31
    MOINS  shift, and go to state 32

    exp  go to state 101
    app  go to state 47


state 77

   48 exp: exp STAR . exp

    NUM    shift, and go to state 23
    ID     shift, and go to state 52
    PO     shift, and go to state 26
    NOT    shift, and go to state 31
    MOINS  shift, and go to state 32

    exp  go to state 102
    app  go to state 47


state 78

   49 exp: exp DIV . exp

    NUM    shift, and go to state 23
    ID     shift, and go to state 52
    PO     shift, and go to state 26
    NOT    shift, and go to state 31
    MOINS  shift, and go to state 32

    exp  go to state 103
    app  go to state 47


state 79

   24 inst: exp pv .

    $default  reduce using rule 24 (inst)


state 80

    7 params: type ID vir params .

    $default  reduce using rule 7 (params)


state 81

   46 exp: exp . PLUS exp
   47    | exp . MOINS exp
   48    | exp . STAR exp
   49    | exp . DIV exp
   55    | exp . INF exp
   56    | exp . SUP exp
   57    | exp . EQUAL exp
   58    | exp . DIFF exp
   59    | exp . AND exp
   60    | exp . OR exp
   64 arglist: exp . VIR arglist
   65        | exp .

    VIR    shift, and go to state 104
    AND    shift, and go to state 69
    OR     shift, and go to state 70
    DIFF   shift, and go to state 71
    EQUAL  shift, and go to state 72
    SUP    shift, and go to state 73
    INF    shift, and go to state 74
    PLUS   shift, and go to state 75
    MOINS  shift, and go to state 76
    STAR   shift, and go to state 77
    DIV    shift, and go to state 78

    $default  reduce using rule 65 (arglist)


state 82

   61 app: ID PO args . PF

    PF  shift, and go to state 105


state 83

   62 args: arglist .

    $default  reduce using rule 62 (args)


state 84

   33 aff: ID EQ exp .
   46 exp: exp . PLUS exp
   47    | exp . MOINS exp
   48    | exp . STAR exp
   49    | exp . DIV exp
   55    | exp . INF exp
   56    | exp . SUP exp
   57    | exp . EQUAL exp
   58    | exp . DIFF exp
   59    | exp . AND exp
   60    | exp . OR exp

    AND    shift, and go to state 69
    OR     shift, and go to state 70
    DIFF   shift, and go to state 71
    EQUAL  shift, and go to state 72
    SUP    shift, and go to state 73
    INF    shift, and go to state 74
    PLUS   shift, and go to state 75
    MOINS  shift, and go to state 76
    STAR   shift, and go to state 77
    DIV    shift, and go to state 78

    $default  reduce using rule 33 (aff)


state 85

   50 exp: PO exp PF .

    $default  reduce using rule 50 (exp)


state 86

   35 ret: RETURN PO PF .

    $default  reduce using rule 35 (ret)


state 87

    9 vlist: vlist vir . ID

    ID  shift, and go to state 106


state 88

   32 af: AF .

    $default  reduce using rule 32 (af)


state 89

   25 inst: ao block af .

    $default  reduce using rule 25 (inst)


state 90

   39 bool_cond: PO exp . PF
   46 exp: exp . PLUS exp
   47    | exp . MOINS exp
   48    | exp . STAR exp
   49    | exp . DIV exp
   55    | exp . INF exp
   56    | exp . SUP exp
   57    | exp . EQUAL exp
   58    | exp . DIFF exp
   59    | exp . AND exp
   60    | exp . OR exp

    PF     shift, and go to state 107
    AND    shift, and go to state 69
    OR     shift, and go to state 70
    DIFF   shift, and go to state 71
    EQUAL  shift, and go to state 72
    SUP    shift, and go to state 73
    INF    shift, and go to state 74
    PLUS   shift, and go to state 75
    MOINS  shift, and go to state 76
    STAR   shift, and go to state 77
    DIV    shift, and go to state 78


state 91

   36 cond: if bool_cond inst . elsop

    ELSE  shift, and go to state 108

    ELSE      [reduce using rule 38 (elsop)]
    $default  reduce using rule 38 (elsop)

    elsop  go to state 109
    else   go to state 110


state 92

   43 while_cond: PO exp . PF
   46 exp: exp . PLUS exp
   47    | exp . MOINS exp
   48    | exp . STAR exp
   49    | exp . DIV exp
   55    | exp . INF exp
   56    | exp . SUP exp
   57    | exp . EQUAL exp
   58    | exp . DIFF exp
   59    | exp . AND exp
   60    | exp . OR exp

    PF     shift, and go to state 111
    AND    shift, and go to state 69
    OR     shift, and go to state 70
    DIFF   shift, and go to state 71
    EQUAL  shift, and go to state 72
    SUP    shift, and go to state 73
    INF    shift, and go to state 74
    PLUS   shift, and go to state 75
    MOINS  shift, and go to state 76
    STAR   shift, and go to state 77
    DIV    shift, and go to state 78


state 93

   42 loop: while while_cond inst .

    $default  reduce using rule 42 (loop)


state 94

   46 exp: exp . PLUS exp
   47    | exp . MOINS exp
   48    | exp . STAR exp
   49    | exp . DIV exp
   55    | exp . INF exp
   56    | exp . SUP exp
   57    | exp . EQUAL exp
   58    | exp . DIFF exp
   59    | exp . AND exp
   59    | exp AND exp .
   60    | exp . OR exp

    DIFF   shift, and go to state 71
    EQUAL  shift, and go to state 72
    SUP    shift, and go to state 73
    INF    shift, and go to state 74
    PLUS   shift, and go to state 75
    MOINS  shift, and go to state 76
    STAR   shift, and go to state 77
    DIV    shift, and go to state 78

    $default  reduce using rule 59 (exp)


state 95

   46 exp: exp . PLUS exp
   47    | exp . MOINS exp
   48    | exp . STAR exp
   49    | exp . DIV exp
   55    | exp . INF exp
   56    | exp . SUP exp
   57    | exp . EQUAL exp
   58    | exp . DIFF exp
   59    | exp . AND exp
   60    | exp . OR exp
   60    | exp OR exp .

    AND    shift, and go to state 69
    DIFF   shift, and go to state 71
    EQUAL  shift, and go to state 72
    SUP    shift, and go to state 73
    INF    shift, and go to state 74
    PLUS   shift, and go to state 75
    MOINS  shift, and go to state 76
    STAR   shift, and go to state 77
    DIV    shift, and go to state 78

    $default  reduce using rule 60 (exp)


state 96

   46 exp: exp . PLUS exp
   47    | exp . MOINS exp
   48    | exp . STAR exp
   49    | exp . DIV exp
   55    | exp . INF exp
   56    | exp . SUP exp
   57    | exp . EQUAL exp
   58    | exp . DIFF exp
   58    | exp DIFF exp .
   59    | exp . AND exp
   60    | exp . OR exp

    PLUS   shift, and go to state 75
    MOINS  shift, and go to state 76
    STAR   shift, and go to state 77
    DIV    shift, and go to state 78

    $default  reduce using rule 58 (exp)


state 97

   46 exp: exp . PLUS exp
   47    | exp . MOINS exp
   48    | exp . STAR exp
   49    | exp . DIV exp
   55    | exp . INF exp
   56    | exp . SUP exp
   57    | exp . EQUAL exp
   57    | exp EQUAL exp .
   58    | exp . DIFF exp
   59    | exp . AND exp
   60    | exp . OR exp

    PLUS   shift, and go to state 75
    MOINS  shift, and go to state 76
    STAR   shift, and go to state 77
    DIV    shift, and go to state 78

    $default  reduce using rule 57 (exp)


state 98

   46 exp: exp . PLUS exp
   47    | exp . MOINS exp
   48    | exp . STAR exp
   49    | exp . DIV exp
   55    | exp . INF exp
   56    | exp . SUP exp
   56    | exp SUP exp .
   57    | exp . EQUAL exp
   58    | exp . DIFF exp
   59    | exp . AND exp
   60    | exp . OR exp

    PLUS   shift, and go to state 75
    MOINS  shift, and go to state 76
    STAR   shift, and go to state 77
    DIV    shift, and go to state 78

    $default  reduce using rule 56 (exp)


state 99

   46 exp: exp . PLUS exp
   47    | exp . MOINS exp
   48    | exp . STAR exp
   49    | exp . DIV exp
   55    | exp . INF exp
   55    | exp INF exp .
   56    | exp . SUP exp
   57    | exp . EQUAL exp
   58    | exp . DIFF exp
   59    | exp . AND exp
   60    | exp . OR exp

    PLUS   shift, and go to state 75
    MOINS  shift, and go to state 76
    STAR   shift, and go to state 77
    DIV    shift, and go to state 78

    $default  reduce using rule 55 (exp)


state 100

   46 exp: exp . PLUS exp
   46    | exp PLUS exp .
   47    | exp . MOINS exp
   48    | exp . STAR exp
   49    | exp . DIV exp
   55    | exp . INF exp
   56    | exp . SUP exp
   57    | exp . EQUAL exp
   58    | exp . DIFF exp
   59    | exp . AND exp
   60    | exp . OR exp

    STAR  shift, and go to state 77
    DIV   shift, and go to state 78

    $default  reduce using rule 46 (exp)


state 101

   46 exp: exp . PLUS exp
   47    | exp . MOINS exp
   47    | exp MOINS exp .
   48    | exp . STAR exp
   49    | exp . DIV exp
   55    | exp . INF exp
   56    | exp . SUP exp
   57    | exp . EQUAL exp
   58    | exp . DIFF exp
   59    | exp . AND exp
   60    | exp . OR exp

    STAR  shift, and go to state 77
    DIV   shift, and go to state 78

    $default  reduce using rule 47 (exp)


state 102

   46 exp: exp . PLUS exp
   47    | exp . MOINS exp
   48    | exp . STAR exp
   48    | exp STAR exp .
   49    | exp . DIV exp
   55    | exp . INF exp
   56    | exp . SUP exp
   57    | exp . EQUAL exp
   58    | exp . DIFF exp
   59    | exp . AND exp
   60    | exp . OR exp

    $default  reduce using rule 48 (exp)


state 103

   46 exp: exp . PLUS exp
   47    | exp . MOINS exp
   48    | exp . STAR exp
   49    | exp . DIV exp
   49    | exp DIV exp .
   55    | exp . INF exp
   56    | exp . SUP exp
   57    | exp . EQUAL exp
   58    | exp . DIFF exp
   59    | exp . AND exp
   60    | exp . OR exp

    $default  reduce using rule 49 (exp)


state 104

   64 arglist: exp VIR . arglist

    NUM    shift, and go to state 23
    ID     shift, and go to state 52
    PO     shift, and go to state 26
    NOT    shift, and go to state 31
    MOINS  shift, and go to state 32

    exp      go to state 81
    app      go to state 47
    arglist  go to state 112


state 105

   61 app: ID PO args PF .

    $default  reduce using rule 61 (app)


state 106

    9 vlist: vlist vir ID .

    $default  reduce using rule 9 (vlist)


state 107

   39 bool_cond: PO exp PF .

    $default  reduce using rule 39 (bool_cond)


state 108

   41 else: ELSE .

    $default  reduce using rule 41 (else)


state 109

   36 cond: if bool_cond inst elsop .

    $default  reduce using rule 36 (cond)


state 110

   37 elsop: else . inst

    NUM     shift, and go to state 23
    ID      shift, and go to state 24
    AO      shift, and go to state 25
    PO      shift, and go to state 26
    PV      shift, and go to state 27
    RETURN  shift, and go to state 28
    IF      shift, and go to state 29
    WHILE   shift, and go to state 30
    NOT     shift, and go to state 31
    MOINS   shift, and go to state 32

    pv     go to state 37
    inst   go to state 113
    ao     go to state 39
    aff    go to state 40
    ret    go to state 41
    cond   go to state 42
    if     go to state 43
    loop   go to state 44
    while  go to state 45
    exp    go to state 46
    app    go to state 47


state 111

   43 while_cond: PO exp PF .

    $default  reduce using rule 43 (while_cond)


state 112

   64 arglist: exp VIR arglist .

    $default  reduce using rule 64 (arglist)


state 113

   37 elsop: else inst .

    $default  reduce using rule 37 (elsop)
